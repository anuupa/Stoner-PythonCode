*********
Cookbook
*********

This section gives some short examples to give an idea of things that can be
done with the Stoner python module in just a few lines.

The Utils module
================

.. currentmodule:: Stoner.Utils

The **Stoner** package comes with an extra :py:mod:`Stoner.Utils` module that includes some handy utility 
functions. 

Splitting Data into rising and falling values
---------------------------------------------

So far the module just contains one function that will take a single :py:class:`Stoner.Core.DataFile`
 object and split it into a series of :py:class:`Stoner.Core.DataFile` objects where one column is either 
rising or falling. This is designed to help deal with analysis problems involving hysteretic data.::

    from Stoner.Utils import split_up_down
    folder=split_up_down(data,column)

*folder*is a :py:class:`Stoner.Folders.DataFolder` instance with two groups, one for rising values of the column
 and one for falling values of the column. The :py:func:`split\_up_down` will take an optional third parameter 
which is an existing :py:class:`Stoner.Core.DataFolder` instance to which the new groups (if they 
don't already exist) and files will be added.  

Other Recipies
==============

Extract X-Y(Z) from X-Y-Z data
------------------------------

In a number of measurement systems the data is returned as 3 parameters X, Y and
Z and one wishes to extract X-Y as a function of constant Z. For example, *I-V*
sweeps as a function of gate voltage *V:sub:G*. Assuming we have a data file with
columns *Current*, *Voltage*,*Gate*::

   d=DataFile('data.txt')
   t=d
   for gate in d.unique('Gate'):
       t.data=d.search('Gate',gate)
       t.save('Data Gate='+str(gate)+'.txt')

The first line opens the data file containing the *I-V(V_G)* data. The second
creates a temporary copy of the :py:class:`Stoner.Core.DataFile` object - ensuring that we get a copy of
all metadata and column headers. The **for** loop iterates over all unique
values of the data in the gate column and then inside the for loop, searches for
the corresponding *I-V* data, sets it as the data of the temporary DataFile and
then saves it.

Mapping X-Y-Z data to Z(X,Y) data
----------------------------------

In a similar fashion to the previous section, where data has been recorded with
fixed values of *X* and *Y* eg *I* measured for fixed *V* and *V_*, it can be
useful to map the data to a matrix.::

   d=DataFile('Data,.txt')
   t=d
   for gate in d.unique('Gate'):
      t=t+d.search('Gate',gate)[:,d.find_col('Current')]
   t.column_headers=['Bias='+str(x) for x in d.unique('Voltage')]
   t.add_column(d.unique('Gate'),'Gate Voltage',0)

The start of the script follows the previous section, however this time in the
for loop the addition operator is used to add a single row to the temporary
:py:class:`Stoner.Core.DataFile` *t*. In this case we are using the utility method
:py:meth:`Stoner.Core.DataFile.find_col` to find the index of the column with the current
data. After the **for** loop we set the column headers in *t* and then insert
an additional column at the start with the gate voltage values.

The matrix generated by this code is suitable for feeding directly into 
:py:meth:`Stoner.Plot.PlotFile.plot_matrix`, however, the same plot could be generated 
directly from the :py:meth:`Stoner.Plot.PlotFile.plot_xyz` method too.
